// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const addReactionFromMessage = `-- name: AddReactionFromMessage :one
UPDATE messages
SET reaction_count = reaction_count + 1
WHERE id = $1
RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

func (q *Queries) AddReactionFromMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, addReactionFromMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const answerMessage = `-- name: AnswerMessage :one
UPDATE messages
SET answered = true
WHERE id = $1
RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

func (q *Queries) AnswerMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, answerMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (id, theme, name)
VALUES ($1, $2, $3)
RETURNING id, theme, name
`

type CreateRoomParams struct {
	ID    uuid.UUID
	Theme string
	Name  string
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.ID, arg.Theme, arg.Name)
	var i Room
	err := row.Scan(&i.ID, &i.Theme, &i.Name)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, theme, name FROM rooms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Theme, &i.Name)
	return i, err
}

const getRoomByName = `-- name: GetRoomByName :one
SELECT id, theme, name FROM rooms
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetRoomByName(ctx context.Context, name string) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByName, name)
	var i Room
	err := row.Scan(&i.ID, &i.Theme, &i.Name)
	return i, err
}

const getRoomByTheme = `-- name: GetRoomByTheme :one
SELECT id, theme, name FROM rooms
WHERE theme = $1 LIMIT 1
`

func (q *Queries) GetRoomByTheme(ctx context.Context, theme string) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByTheme, theme)
	var i Room
	err := row.Scan(&i.ID, &i.Theme, &i.Name)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT id, theme, name FROM rooms
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRoomsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Theme, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeReactionFromMessage = `-- name: RemoveReactionFromMessage :one
UPDATE messages
SET reaction_count = reaction_count - 1
WHERE id = $1
RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

func (q *Queries) RemoveReactionFromMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, removeReactionFromMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unAnswerMessage = `-- name: UnAnswerMessage :one
UPDATE messages
SET answered = false
WHERE id = $1
RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

func (q *Queries) UnAnswerMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, unAnswerMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms
SET theme = $2, name = $3
WHERE id = $1
RETURNING id, theme, name
`

type UpdateRoomParams struct {
	ID    uuid.UUID
	Theme string
	Name  string
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.ID, arg.Theme, arg.Name)
	var i Room
	err := row.Scan(&i.ID, &i.Theme, &i.Name)
	return i, err
}

const updateRoomName = `-- name: UpdateRoomName :one
UPDATE rooms
SET name = $2
WHERE id = $1
RETURNING id, theme, name
`

type UpdateRoomNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateRoomName(ctx context.Context, arg UpdateRoomNameParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoomName, arg.ID, arg.Name)
	var i Room
	err := row.Scan(&i.ID, &i.Theme, &i.Name)
	return i, err
}

const updateRoomTheme = `-- name: UpdateRoomTheme :one
UPDATE rooms
SET theme = $2
WHERE id = $1
RETURNING id, theme, name
`

type UpdateRoomThemeParams struct {
	ID    uuid.UUID
	Theme string
}

func (q *Queries) UpdateRoomTheme(ctx context.Context, arg UpdateRoomThemeParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoomTheme, arg.ID, arg.Theme)
	var i Room
	err := row.Scan(&i.ID, &i.Theme, &i.Name)
	return i, err
}
